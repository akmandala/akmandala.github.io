#require "rocky.class.nut:2.0.0"

const NUMBER_OF_FREQ = 24;
local ad0Output;
local micfreq = array(NUMBER_OF_FREQ*5);
local ad0Time = 0;

function customCORSMiddleware(context, next) {
    context.setHeader("Access-Control-Allow-Origin", "*");
    context.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, X-Version");
    context.setHeader("Access-Control-Allow-Methods", "POST, PUT, PATCH, GET, OPTIONS");

    next();
}

app <- Rocky( { "accessControl": false });  // Create the HTTP request handler
app.use([ customCORSMiddleware ]);          // This is to bypass security feature

app.get("/sensor", function(context) {         // if a request with tail end /acc, then serve..
    context.send({ sensor = ad0Output, mic = micfreq, ts = ad0Time})  // by sending context containing this data
});

function ReadAcc(inputString) {
    ad0Output = inputString;
    ad0Time = ad0Time + 1;
}

device.on("dbgAcc", ReadAcc);           // When receiving dbgAcc message from device, call ReadAcc func.

// pre-calculated coefficient
local COEFF_G = array(NUMBER_OF_FREQ);
COEFF_G[0] = 1.361633506;
COEFF_G[1] = 1.28843816;
COEFF_G[2] = 1.207537667;
COEFF_G[3] = 1.118300436;
COEFF_G[4] = 1.020096689;
COEFF_G[5] = 0.9123030538;
COEFF_G[6] = 0.7943246133;
COEFF_G[7] = 0.6656687139;
COEFF_G[8] = 0.5258974076;
COEFF_G[9] = 0.3747626292;
COEFF_G[10] = 0.2121914629;
COEFF_G[11] = 0.03843501997;
COEFF_G[12] = -0.1459541966;
COEFF_G[13] = -0.3399271074;
COEFF_G[14] = -0.541852784;
COEFF_G[15] = -0.7494041353;
COEFF_G[16] = -0.959402745;
COEFF_G[17] = -1.167715891;
COEFF_G[18] = -1.369048409;
COEFF_G[19] = -1.556885163;
COEFF_G[20] = -1.723431917;
COEFF_G[21] = -1.859552972;
COEFF_G[22] = -1.954971469;
COEFF_G[23] = -1.998523353;
const ADCCENTER = 32768;

function ReadMic(buffer) {
    local Q0 = array(NUMBER_OF_FREQ);
    local Q1 = array(NUMBER_OF_FREQ);
    local Q2 = array(NUMBER_OF_FREQ);

    for (local k=0;k<5;k++) {
        // initialise filter
        for (local i=0;i<NUMBER_OF_FREQ;i++) {
            Q1[i] = 0;
            Q0[i] = 0;
        }
        // run the algorithm for each 16bits data on the buffer
        for (local j=0;j<800;j++) {
            local sample = buffer.readn('w');
            for (local i=0;i<NUMBER_OF_FREQ;i++) {
                Q2[i] = Q1[i];
                Q1[i] = Q0[i];
                Q0[i] = (COEFF_G[i] * Q1[i]) - Q2[i] + (sample - ADCCENTER);
            }
        }
        // calculate magnitude from last filtered data
        for (local i=0;i<NUMBER_OF_FREQ;i++) {
            micfreq[i+(NUMBER_OF_FREQ*k)] = math.sqrt((Q0[i]*Q0[i]) + (Q1[i]*Q1[i]) - (COEFF_G[i]*Q0[i]*Q1[i]));
        }
    }
    ad0Time = ad0Time + 1;
}

device.on("dbgMic", ReadMic);           // When receiving dbgMic message from device, call ReadMic func.